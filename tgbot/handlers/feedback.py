import asyncio
import emoji
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from tgbot.keyboards.main import inline_keyboard
from tgbot.misc.states import Test
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

import pandas as pd

df = pd.read_excel('/Users/dmitryklimenko/Desktop/tgbot_template/tgbot/handlers/data.xlsx')

yes_no = InlineKeyboardMarkup(row_width=2,
                              inline_keyboard=
                              [
                                  [
                                      InlineKeyboardButton(
                                          text="–î–∞ üëç",
                                          callback_data='–î–∞'
                                      ),
                                      InlineKeyboardButton(
                                          text="–ù–µ—Ç üëé",
                                          callback_data='–ù–µ—Ç'
                                      )
                                  ]
                              ]
                              )


# @Dispatcher.message_handler(Command("feedback"))
async def feedback_start(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer_sticker(sticker="CAACAgIAAxkBAAEBI3Nip3dGSI77i1SuPBMqlDJ-UytzYQACJhAAAnep8Es_tBwk-BeUKiQE",
                                    reply_markup=types.ReplyKeyboardRemove())
    await Test.Q1.set()
    await cb.message.answer(cb.from_user.full_name
                            + ", –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –≤–∞—à —Ä–∞—Ü–∏–æ–Ω?", reply_markup=yes_no)
    await state.update_data(name=cb.from_user.first_name,
                            surname=cb.from_user.last_name,
                            id=cb.from_user.id,
                            date=cb.message.date)
    # await Test.first()


async def Q1_answer(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    await state.update_data(q1=answer)
    if (answer == '–î–∞'):
        await callback.message.answer_sticker(
            sticker="CAACAgIAAxkBAAEBI3dip3vdIHdPHGznEqnKZc_Wrc9j3wACFw4AAu9lUEhF0ygYG6bV5iQE")
        await callback.message.answer("–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?")
    else:
        await callback.message.answer_sticker(
            sticker="CAACAgIAAxkBAAEBI3tip3z1jkwAAQjQ3fl3b82J34GpvpsAApcNAAJvivBLcCAac8Fe0HQkBA")
        await callback.message.answer("–ü–æ—á–µ–º—É? –û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞—à–∏ —Ä–∞—Ü–∏–æ–Ω—ã.")

    await Test.next()


async def Q2_answer(message: Message, state: FSMContext):
    await state.update_data(q2=message.text)
    data = await state.get_data()
    # await message.answer(f"–í–∞—à–µ –∏–º—è: "+ data.get("name"))
    # await message.answer(f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: "+ data.get("surname"))
    # await message.answer(f"–í–∞—à Telegram id: "+ str(data.get("id")))
    # await message.answer(f"–û—Ç–≤–µ—Ç 1: " + str(data.get("q1")))
    # await message.answer(f"–û—Ç–≤–µ—Ç 2: " + str(data.get("q2")))
    df.loc[len(df.index)] = data
    df.to_excel('/Users/dmitryklimenko/PycharmProjects/tgbot_template/tgbot/handlers/data.xlsx', index=False)
    await state.finish()
    await message.answer("–°–ø–∞—Å–∏–±–æ!  –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ —É—á—Ç–µ–º –∏ —Å—Ç–∞–Ω–µ–º –ª—É—á—à–µ.", reply_markup=inline_keyboard)
    # await state.reset_state(with_data=False)
    # —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å—Ç–∏—Ä–∞—è —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ


async def if_not_query(message: Message, state: FSMContext):
    await message.answer_sticker("CAACAgIAAxkBAAEBI39ip4EB7unOgbngNgdicjl8BTtCvAACHwwAAr9_OUl5W2p_J1WxryQE")
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∏–∂–µ." + emoji.emojize(":down_arrow:"),
                         reply_markup=yes_no)


async def if_not_text(message: Message, state: FSMContext):
    await message.answer_sticker("CAACAgIAAxkBAAEBI39ip4EB7unOgbngNgdicjl8BTtCvAACHwwAAr9_OUl5W2p_J1WxryQE")
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã." + emoji.emojize(":down_arrow:"))


def register_feedback(dp: Dispatcher):
    dp.register_callback_query_handler(feedback_start, lambda callback_query: callback_query.data == "feedback")
    dp.register_callback_query_handler(Q1_answer, lambda callback_query: True, state=Test.Q1)
    dp.register_message_handler(if_not_query, state=Test.Q1, content_types=types.ContentTypes.ANY)
    dp.register_message_handler(Q2_answer, state=Test.Q2)
    dp.register_message_handler(if_not_text, state=Test.Q2, content_types=types.ContentTypes.ANY)
